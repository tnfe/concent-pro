{"version":3,"sources":["pages/_Demos/Template/model/state.ts","pages/_Demos/Template/model/computed.ts","pages/_Demos/Template/model/reducer.ts","pages/_Demos/Template/model/lifecycle.ts","pages/_Demos/Template/model/meta.ts","pages/_Demos/Template/model/index.ts","pages/_Demos/Template/index.tsx"],"names":["getInitialState","desc","loading","reversedDesc","newState","split","reverse","join","forCopy","payload","moduleState","ac","console","log","setState","tryCutDesc","length","substr","tryAsyncCutDesc","a","timerUtil","dispatch","innerLoadingTryAsyncCutDesc","params","fnPayload","callerParams","callTarget","initState","clear","mounted","willUnmount","modelDesc","state","computed","reducer","lifecycle","ghosts","model","useModel","makeUseModelWithSetup","makeUseModelWithSetupCuf","makeUseModel","configure","InputArea","React","memo","sync","value","onChange","RevserdDesc","moduleComputed","message","type","props","mr","mrg","spinning","onClick"],"mappings":"+nBAUeA,MATf,WACE,MAAO,CACLC,KAAM,uBACNC,SAAS,ICFN,SAASC,EAAaC,GAC3B,OAAOA,EAASH,KAAKI,MAAM,IAAIC,UAAUC,KAAK,I,8CCGzC,SAASC,EAAQC,EAAsBC,EAAiBC,GAC7DC,QAAQC,IAAI,8CAA+CF,EAAGG,UAGzD,SAASC,EAAWN,EAAsBC,GAAkB,IACzDT,EAASS,EAATT,KACR,GAAIA,EAAKe,OAAS,EAChB,MAAO,CAAEf,KAAMA,EAAKgB,OAAO,EAAG,IAI3B,SAAeC,EAAtB,sC,4CAAO,WAA+BT,EAAsBC,EAAiBC,GAAtE,SAAAQ,EAAA,sEACCC,IAAgB,KADjB,uBAECT,EAAGU,SAASN,GAFb,4C,sBAKA,SAAeO,EAAtB,sC,4CAAO,WAA2Cb,EAAsBC,EAAiBC,GAAlF,eAAAQ,EAAA,sDACCI,EAASC,oBAAUT,EAAYN,GACrCE,EAAGU,SAASnB,EAASqB,GAFhB,4C,sBAQA,SAAerB,EAAtB,sC,4CAAO,WAAuBuB,EAAgCf,EAAiBC,GAAxE,SAAAQ,EAAA,sEACCR,EAAGG,SAAS,CAAEZ,SAAS,IADxB,uBAECkB,IAAgB,KAFjB,uBAGCM,YAAWD,EAAcd,GAH1B,gCAIE,CAAET,SAAS,IAJb,4C,sBAOA,SAASyB,IACdf,QAAQC,IAAI,kBAGP,SAASe,IACdhB,QAAQC,IAAI,cCnCP,SAASgB,EAAQR,IAIjB,SAASS,EAAYT,ICIrB,IAEMU,EAAY,CACvBC,QACAC,WACAC,UACAC,YACAC,OAAQ,CAAC,YAGEC,EAAK,eAVQ,aAUWN,GAcxBO,GAFoBC,gCAtBP,cAuBUC,mCAvBV,cAwBFC,uBAxBE,eA4BXJ,ICxCfK,oBAAUX,GAEKA,I,6DCETY,EAAYC,IAAMC,MAAK,WAAO,IAAD,EACTP,IAAhBN,EADyB,EACzBA,MAAOc,EADkB,EAClBA,KACf,OACE,qEACS,kBAAC,IAAD,CAAOC,MAAOf,EAAM/B,KAAM+C,SAAUF,EAAK,cAKhDG,EAAcL,IAAMC,MAAK,WAAO,IAC5BK,EAAmBZ,IAAnBY,eACR,OAAO,kBAAC,IAAD,CAAOC,QAASD,EAAe/C,aAAciD,KAAK,eAoB5CR,cAAMC,MAjBrB,SAA0BQ,GAA6B,IAAD,EACzBf,IAAnBN,EAD4C,EAC5CA,MAAOsB,EADqC,EACrCA,GAAIC,EADiC,EACjCA,IAEnB,OACE,6BACE,kBAAC,IAAD,KAAMvB,EAAM/B,MACZ,kBAAC,IAAD,CAAMuD,SAAUxB,EAAM9B,SACpB,kBAAC,IAAD,CAAQuD,QAASH,EAAGvC,YAApB,4BACA,kBAAC,IAAD,CAAQ0C,QAASH,EAAGhC,6BAApB,+CACA,kBAAC,IAAD,CAAQmC,QAASF,EAAIrD,QAAQgB,iBAA7B,wFACA,kBAACyB,EAAD,MACA,kBAACM,EAAD","file":"static/js/13.6e6ca5b1.chunk.js","sourcesContent":["\nfunction getInitialState() {\n  return {\n    desc: 'I am an empty module',\n    loading: false,\n  };\n}\n\nexport type St = ReturnType<typeof getInitialState>;\n\nexport default getInitialState;\n","import { St } from './meta';\n\nexport function reversedDesc(newState: St) {\n  return newState.desc.split('').reverse().join('');\n}\n","import * as timerUtil from 'utils/timer';\nimport { VoidPayload } from 'types/store';\nimport { fnPayload, CallTargetParams } from 'concent';\nimport { callTarget } from 'services/concent';\nimport { IAC, St } from './meta';\n\nexport function forCopy(payload: VoidPayload, moduleState: St, ac: IAC) {\n  console.log('call ac.setState or ac.dispatch when needed', ac.setState);\n}\n\nexport function tryCutDesc(payload: VoidPayload, moduleState: St) {\n  const { desc } = moduleState;\n  if (desc.length > 8) {\n    return { desc: desc.substr(0, 8) };\n  }\n}\n\nexport async function tryAsyncCutDesc(payload: VoidPayload, moduleState: St, ac: IAC) {\n  await timerUtil.delay(666);\n  await ac.dispatch(tryCutDesc);\n}\n\nexport async function innerLoadingTryAsyncCutDesc(payload: VoidPayload, moduleState: St, ac: IAC) {\n  const params = fnPayload(tryCutDesc, payload);\n  ac.dispatch(loading, params);\n}\n\n// 在 meta.js 里已注册为ghost函数\n// 支持 reducer文件里内部调用 ac.dispatch(loading, fnPayload(targetFn, payload))\n// 或者视图里触发 mrg.loading.targetFn(payload)\nexport async function loading(callerParams: CallTargetParams, moduleState: St, ac: IAC) {\n  await ac.setState({ loading: true });\n  await timerUtil.delay(666);\n  await callTarget(callerParams, ac);\n  return { loading: false };\n}\n\nexport function initState() {\n  console.log('call initState');\n}\n\nexport function clear() {\n  console.log('call clear');\n}\n","import { IDispatch } from 'concent';\nimport * as reducer from './reducer';\n\n// export async function initState(){}\n\n// export function loaded(dispatch: IDispatch) {}\n\nexport function mounted(dispatch: IDispatch) {\n  // dispatch(reducer.initState);\n}\n\nexport function willUnmount(dispatch: IDispatch) {\n  // dispatch(reducer.clear);\n}","import {\n  getComputed, getState, ComputedValType, StateType,\n  IModActionCtx, IRefCtxM, IAnyObj, ICtxBase, SettingsType\n} from 'concent';\nimport { makeUseModel, makeUseModelWithSetup, makeUseModelWithSetupCuf } from 'concent-utils';\nimport state, { St as ModuleState } from './state';\nimport * as computed from './computed';\nimport * as reducer from './reducer';\nimport * as lifecycle from './lifecycle';\n// 如不需要知道根state，根computed，注释下面两句，打开 15 行即可\nimport { RootState, RootCu } from 'types/store';\nexport type RootInfo = { state: RootState, computed: RootCu };\n\n// export type RootInfo = { state: {}, computed: {} };\n\nexport const moduleName = 'SomeModule';\n\nexport const modelDesc = {\n  state,\n  computed,\n  reducer,\n  lifecycle,\n  ghosts: ['loading'] as const, // 仅当需要ghost功能时，才配置此项，否则可以删掉\n};\n\nexport const model = { [moduleName]: modelDesc };\n\nexport type ModelDesc = typeof modelDesc;\nexport type ModuleName = typeof moduleName;\nexport type St = ModuleState;\n// export type RootInfo = { state: {}, computed: {} };\n/** 用于描述 reducer 函数第3位参数 actionCtx 的类型 */\nexport type IAC = IModActionCtx<RootInfo, ModelDesc>;\nexport type CtxPre<Props = IAnyObj, RefCu = IAnyObj, Extra = IAnyObj> = IRefCtxM<RootInfo, Props, ModelDesc, IAnyObj, RefCu, Extra>;\ntype ValidSetup = (ctx: ICtxBase) => IAnyObj | void;\nexport type Ctx<Setup extends ValidSetup> = IRefCtxM<RootInfo, {}, ModelDesc, SettingsType<Setup>>;\n\nexport const useModelWithSetup = makeUseModelWithSetup<RootInfo, ModelDesc>(moduleName);\nexport const useModelWithSetupCuf = makeUseModelWithSetupCuf<RootInfo, ModelDesc>(moduleName);\nexport const useModel = makeUseModel<RootInfo, ModelDesc>(moduleName);\nexport const getModelComputed = () => getComputed<ComputedValType<typeof computed>>(moduleName);\nexport const getModelState = () => getState<StateType<typeof state>>(moduleName);\n\nexport default model;\n","import modelDesc from './meta';\nimport { configure } from 'concent';\n\nconfigure(modelDesc);\n\nexport default modelDesc;\n","import './model';\nimport React from 'react';\nimport { Input, Alert, Button, Spin, Tag } from 'antd';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { useModel } from './model/meta';\n\n\nconst InputArea = React.memo(() => {\n  const { state, sync } = useModel();\n  return (\n    <div>\n      请输入的描述 <Input value={state.desc} onChange={sync('desc')} />\n    </div>\n  );\n});\n\nconst RevserdDesc = React.memo(() => {\n  const { moduleComputed } = useModel();\n  return <Alert message={moduleComputed.reversedDesc} type=\"success\" />\n});\n\nfunction DemoPageTodoList(props: RouteComponentProps) {\n  const { state, mr, mrg } = useModel();\n\n  return (\n    <div>\n      <Tag>{state.desc}</Tag>\n      <Spin spinning={state.loading}>\n        <Button onClick={mr.tryCutDesc}>裁减描述</Button>\n        <Button onClick={mr.innerLoadingTryAsyncCutDesc}>内部函数包裹loading</Button>\n        <Button onClick={mrg.loading.tryAsyncCutDesc}>使用ghost功能复用loading函数（推荐）</Button>\n        <InputArea />\n        <RevserdDesc />\n      </Spin>\n    </div>\n  );\n}\n\nexport default React.memo(DemoPageTodoList);\n"],"sourceRoot":""}