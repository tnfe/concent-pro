{"version":3,"sources":["components/GeneralTable/model/state.ts","components/GeneralTable/model/computed.ts","components/GeneralTable/model/reducer.ts","components/GeneralTable/model/lifecycle.ts","components/GeneralTable/model/meta.ts","components/GeneralTable/model/index.ts","components/GeneralTable/index.tsx","pages/TodoList/ListArea.tsx","pages/TodoList/SearchArea.tsx","pages/TodoList/index.tsx"],"names":["getInitMetaData","hasMoreMode","pageSize","lockId","hasMore","current","total","list","loading","getInitialState","meta","doubleCount","newState","getTableMeta","tableId","obj","modTableMeta","moduleState","toMod","tableMeta","parseInt","handlePageCurrentChange","_","ctx","a","fetchFn","dispatch","Date","now","fetchTableData","handleNextPage","handlePageSizeChange","clearTable","m","oldList","res","pageList","page_list","start","forEach","v","idx","__seq","targetList","concat","mounted","willUnmount","modelDesc","state","computed","reducer","lifecycle","model","useModelWithSetup","makeUseModelWithSetup","makeUseModelWithSetupCuf","makeUseModel","configure","setup","props","tid","fetchAfterMounted","propsFetchFn","pageSizeOptions","ccUniqueKey","on","_fetchFn","mr","effect","handelPageSizeChange","page","React","memo","settings","columns","rowKey","scroll","x","disableBtnWhenNoMore","size","dataSource","pagination","style","height","width","disabled","onClick","onShowSizeChange","onChange","showSizeChanger","key","dataIndex","title","render","done","refreshTable","emit","fetchList","params","test","setModuleState","value","useC2Mod","se","id","sync","syncer","keyword","bigValue","addBig","hiThere","changeBigTo","to","setState","ValueLabel","border","tag","moduleComputed","message","formattedInput","SearchArea"],"mappings":"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","file":"static/js/3.bd14bf25.chunk.js","sourcesContent":["import { MetaItem } from '../type';\n\nexport function getInitMetaData(hasMoreMode = false, pageSize = 50) {\n  return {\n    lockId: 'init_lock', // 用于控制多个fetcher刷新同一个表格时，总是只认最近调用的那一个返回的数据\n    /** 是否处于 hasMore 模式 */\n    hasMoreMode,\n    hasMore: true,\n    current: 1,\n    pageSize,\n    total: 0,\n    list: [] as any[],\n    loading: false,\n  };\n}\n\nexport function getInitialState() {\n  return {\n    meta: { } as Record<string, MetaItem>,\n  };\n}\n\nexport type St = ReturnType<typeof getInitialState>;\n\nexport default getInitialState;\n","import { St } from './meta';\n\n// only value change will triiger this function to execute again\nexport function doubleCount(newState: St) {\n  // use input newState to calculate new value\n}\n\n","import * as obj from 'utils/obj';\nimport { getInitMetaData } from './state';\nimport { IAC, St } from './meta';\n\nfunction getTableMeta(meta: any, tableId: string) {\n  return obj.safeGet(meta, tableId, getInitMetaData());\n}\n\nexport function modTableMeta({ tableId, toMod }: any, moduleState: St) {\n  const { meta } = moduleState;\n  const tableMeta = getTableMeta(meta, tableId);\n  if (obj.isValidVal(toMod.pageSize) && typeof toMod.pageSize !== 'number') {\n    toMod.pageSize = parseInt(toMod.pageSize, 10);\n  }\n  obj.safeAssign(tableMeta, toMod);\n  return { meta };\n}\n\n/** 处理页码变更 */\nexport async function handlePageCurrentChange({ current, tableId, fetchFn }: any, _: St, ctx: IAC) {\n  await ctx.dispatch(modTableMeta, { tableId, toMod: { loading: true, current, lockId: Date.now() } });\n  await ctx.dispatch(fetchTableData, { tableId, fetchFn });\n}\n\n/** 翻到下一页 */\nexport async function handleNextPage({ tableId, fetchFn }: any, { meta }: St, ctx: IAC) {\n  const { current } = getTableMeta(meta, tableId);\n  await ctx.dispatch(handlePageCurrentChange, { current: current + 1, tableId, fetchFn });\n}\n\n/** 处理一页展示条数的变更 */\nexport async function handlePageSizeChange({ tableId, pageSize, fetchFn }: any, _: St, ctx: IAC) {\n  await ctx.dispatch(modTableMeta, { tableId, toMod: { loading: true, pageSize, lockId: Date.now() } });\n  await ctx.dispatch(fetchTableData, { tableId, fetchFn });\n}\n\nexport function clearTable({ tableId }: any, m: St, ctx: IAC) {\n  ctx.dispatch(modTableMeta, {\n    tableId,\n    toMod: { list: [], total: 0, loading: false },\n  });\n}\n\nexport async function fetchTableData({ tableId, fetchFn }: any, moduleState: St, ctx: IAC) {\n  const { meta } = moduleState;\n  const { current, pageSize, lockId, list: oldList, hasMoreMode } = getTableMeta(meta, tableId);\n\n  const res = await fetchFn({ current, pageSize, list: oldList });\n  if (!res) {\n    await ctx.dispatch(modTableMeta, {\n      tableId,\n      toMod: { loading: false },\n    });\n    return;\n  }\n\n  const { pageList, page_list, total = 0, hasMore = true } = res;\n  const list = pageList || page_list || [];\n  if (getTableMeta(meta, tableId).lockId !== lockId) {\n    return; // lockId已不对，这是一个较老生成的lockId，放弃执行当前函数，不触发刷新表格\n  }\n\n  const start = (current - 1) * pageSize;\n  list.forEach((v: any, idx: number) => {\n    if (v) v.__seq = start + (idx + 1);\n  });\n\n  let targetList = list;\n  if (hasMoreMode) {\n    targetList = oldList.concat(list);\n  }\n\n  await ctx.dispatch(modTableMeta, {\n    tableId,\n    toMod: { list: targetList, total, hasMore, loading: false },\n  });\n}\n","\n/*\n|--------------------------------------------------------------------------\n| 定义模块的lifecyle\n|--------------------------------------------------------------------------\n| 文档:  https://concentjs.github.io/concent-doc/guide/concept-module-lifecycle\n*/\nimport { IDispatch } from 'concent';\n// import * as reducer from './reducer';\n\n\n// 异步状态初始化函数\n// export async function initState(){}\n\n// 模块被concent加载完毕时触发，(可替代initState，将初始化逻辑移到reducer文件里)\n// export function loaded(dispatch: IDispatch) {}\n\n// 当前模块的第一个组件实例挂载完毕时触发，\n// 默认只触发一次，如需满足条件反复触发，return false即可\n// 注意此函数触发时机和实例相关，如果没有任何属于此模块的组件实例化，该函数不会被触发\nexport function mounted(dispatch: IDispatch) {\n  // dispatch(reducer.foo);\n}\n\n// 当前模块的最后一个组件实例卸载时触发\n// 默认只触发一次，如需满足条件反复触发，return false即可\nexport function willUnmount(dispatch: IDispatch) {\n  // dispatch(reducer.clear);\n}\n","import { IModActionCtx, IRefCtxM, ReducerCallerParams, IReducerFn, IAnyObj } from 'concent';\nimport { makeUseModel, makeUseModelWithSetup, makeUseModelWithSetupCuf } from 'concent-utils';\n// import { RootState, RootCu } from 'types/store';\nimport state, { St as ModuleState } from './state';\nimport * as computed from './computed';\nimport * as reducer from './reducer';\nimport * as lifecycle from './lifecycle';\n\nexport const moduleName = 'GeneralTable';\n\nexport const modelDesc = {\n  state,\n  computed,\n  reducer,\n  lifecycle,\n};\n\nexport const model = { [moduleName]: modelDesc };\n\nexport type ModelDesc = typeof modelDesc;\nexport type ModuleName = typeof moduleName;\nexport type CallerParams = ReducerCallerParams | [IReducerFn, any];\nexport type ReducerFn = IReducerFn;\nexport type St = ModuleState;\n// export type RootInfo = { state: RootState, computed: RootCu };\nexport type RootInfo = { state: {}, computed: {} };\n/** 用于描述 reducer 函数第3位参数 actionCtx 的类型 */\nexport type IAC = IModActionCtx<RootInfo, ModelDesc>;\nexport type CtxPre<RefCu = IAnyObj, Extra = IAnyObj> = IRefCtxM<RootInfo, IAnyObj, ModelDesc, RefCu, Extra>;\n\nexport const useModelWithSetup = makeUseModelWithSetup<RootInfo, ModelDesc>(moduleName);\nexport const useModelWithSetupCuf = makeUseModelWithSetupCuf<RootInfo, ModelDesc>(moduleName);\nexport const useModel = makeUseModel<RootInfo, ModelDesc>(moduleName);\n\nexport default model;\n","import modelDesc from './meta';\nimport { configure } from 'concent';\n\n/**\n * 使用 configure接口配置模块，此时不用在 src/models/index 里导出该模块到全局\n * 但是需要注意组件的 index文件 第一行代码写下\n * import './model';\n * 以便先触发模块配置过程后再安全的导入其他使用了该模块的组件\n * 如需在别的页面或者组件里可以使用名字配合 src/configs/useC2Mod \n * 函数来消费该模块的数据和调用该模块的方法，将模块提升到 src/models/index 文件导出即可\n */\nconfigure(modelDesc);\n\nexport default modelDesc;\n","/* eslint-disable no-underscore-dangle,no-param-reassign */\nimport './model';\nimport React, { Fragment } from 'react';\nimport { Table, Pagination, Button } from 'antd';\nimport { getInitMetaData } from './model/state';\nimport { CtxPre, useModelWithSetup } from './model/meta';\nimport * as t from './type';\n\nconst setup = (ctx: CtxPre) => {\n  const {\n    tid: tableId, fetchAfterMounted = true, hasMoreMode = false, fetchFn: propsFetchFn,\n    pageSizeOptions = ['50', '100', '200'],\n  } = ctx.props;\n  const { ccUniqueKey } = ctx;\n  if (!ctx.state.meta[tableId]) {\n    const pageSize = parseInt(pageSizeOptions[0], 10) || 50;\n    ctx.state.meta[tableId] = getInitMetaData(hasMoreMode, pageSize);\n  }\n\n  ctx.on(['refreshTable', tableId], async (fetchFn) => {\n    const _fetchFn = fetchFn || propsFetchFn;\n    await ctx.mr.clearTable({ tableId }, ccUniqueKey);\n    await ctx.mr.handlePageCurrentChange({ tableId, current: 1, fetchFn: _fetchFn }, ccUniqueKey);\n  });\n  ctx.on(['clearTable', tableId], () => {\n    ctx.mr.clearTable({ tableId }, ccUniqueKey);\n  });\n  ctx.on(['refreshTableCurPage', tableId], (fetchFn) => {\n    const _fetchFn = fetchFn || propsFetchFn;\n    const tableMeta = ctx.state.meta[tableId];\n    ctx.mr.handlePageCurrentChange({ tableId, current: tableMeta.current, fetchFn: _fetchFn }, ccUniqueKey);\n  });\n\n  ctx.effect(() => {\n    if (fetchAfterMounted) {\n      handlePageCurrentChange(1);\n    }\n    return () => ctx.dispatch('clearTable', { tableId }, ccUniqueKey);\n  }, []);\n\n  const handlePageCurrentChange = (current: number) => {\n    // 触发 handelPageSizeChange 时，同时也会触发 handlePageCurrentChange，这里做个判断，避免冗余请求\n    if (ctx.state.meta[tableId].current === current) return;\n    const { fetchFn } = ctx.props;// fetchFn有可能会变，这里每次取最新的\n    ctx.mr.handlePageCurrentChange({ tableId, current, fetchFn }, ccUniqueKey)\n  };\n  const handelPageSizeChange = (page: number, pageSize: number) => {\n    const { fetchFn } = ctx.props;\n    ctx.mr.handlePageSizeChange({ tableId, pageSize, fetchFn }, ccUniqueKey);\n  };\n  const handleNextPage = () => {\n    const { fetchFn } = ctx.props;\n    ctx.mr.handleNextPage({ tableId, fetchFn }, ccUniqueKey);\n  };\n\n  return {\n    handlePageCurrentChange,\n    handelPageSizeChange,\n    handleNextPage,\n    pageSizeOptions,\n  };\n};\n\nexport type Props = t.Props;\nexport type FetchFn = t.FetchFn;\nexport type FetchFnParams = t.FetchFnParams;\n\n/**\n * #################[Code example]#####################\n * ```js\n *  const fetcher = ()=> xxxService.fetchData();\n *  <GeneralTable tid=\"xxxId\" fetchFn={fetcher} columns={yourColumnsDef} />\n * ```\n * ####################################################\n */\nexport function GeneralTable(props: t.Props) {\n  const { state, settings } = useModelWithSetup(setup, { props });\n  const {\n    tid, columns, rowKey = 'id', scroll = { x: '100%' }, hasMoreMode = false,\n    disableBtnWhenNoMore, size,\n  } = props;\n  const { list, loading, current, total, pageSize, hasMore } = state.meta[tid];\n  const { handelPageSizeChange, handlePageCurrentChange, handleNextPage, pageSizeOptions } = settings;\n\n  const renderBtn = () => {\n    if (disableBtnWhenNoMore && !hasMore) return <Button disabled style={{ width: '100%' }}>没有更多了</Button>;\n    return <Button onClick={handleNextPage} style={{ width: '100%' }}>加载更多</Button>;\n  };\n\n  // console.log(`%c@@@ GeneralTable ${props.tid}`, 'color:red;border:1px solid red;');\n  return (\n    <Fragment>\n      <Table rowKey={rowKey} columns={columns} dataSource={list} size={size}\n        loading={loading} pagination={false} scroll={scroll}\n      />\n      <div style={{ height: '19px', width: '100%' }} />\n      {hasMoreMode\n        ? renderBtn()\n        : (\n          <Pagination onShowSizeChange={handelPageSizeChange} onChange={handlePageCurrentChange}\n            current={current} total={total} showSizeChanger pageSizeOptions={pageSizeOptions}\n            pageSize={pageSize}\n          />\n        )\n      }\n    </Fragment>\n  );\n}\n\nexport default React.memo(GeneralTable);\n","\n\nimport React from 'react';\nimport { Button } from 'antd';\nimport GeneralTable, { FetchFnParams } from 'components/GeneralTable';\nimport { CtxM } from 'types/store';\nimport { useC2Mod } from 'services/concent';\n\nfunction setup(ctx: CtxM<{}, 'TodoList'>) {\n  const { mr } = ctx;\n  return {\n    columns: [\n      {\n        key: 'id',\n        dataIndex: 'id',\n        title: 'id',\n      },\n      {\n        key: 'text',\n        dataIndex: 'text',\n        title: '文案',\n      },\n      {\n        key: 'done',\n        dataIndex: 'done',\n        title: '是否完成',\n        render: (done: boolean) => (done ? 'done' : 'uncomplish'),\n      },\n    ],\n    refreshTable: () => {\n      ctx.emit(['refreshTable', 'todoTable']);\n    },\n    fetchList: (params: FetchFnParams) => mr.fetchList(params),\n    test: () => {\n      ctx.setModuleState('TodoList', { value: Date.now() }, () => { }, null, 500);\n    }\n  };\n}\n\nfunction ListArea() {\n  const { settings: se, state } = useC2Mod('TodoList', { setup });\n  return (\n    <div>\n      <Button id=\"refreshBtn\" onClick={se.refreshTable}>refresh</Button>\n      <Button id=\"refreshBtn\" onClick={se.test}>test {state.value}</Button>\n      <GeneralTable tid=\"todoTable\" columns={se.columns} fetchFn={se.fetchList} />\n    </div>\n  );\n}\n\nexport default React.memo(ListArea);\n","\n\nimport React from 'react';\nimport { Input, Button } from 'antd';\nimport { useC2Mod } from 'services/concent';\n\nfunction SearArea() {\n  const { sync, syncer, state, mr } = useC2Mod('TodoList');\n  return (\n    <div>\n      <Input onChange={sync('keyword')} value={state.keyword} />\n      <Input onChange={syncer.keyword} value={state.keyword} />\n      <span id=\"bigValue\">{state.bigValue}</span>\n      <Button id=\"addBigBtn\" onClick={mr.addBig} />\n    </div>\n  );\n}\n\nexport default React.memo(SearArea);\n","import React from 'react';\nimport { Alert } from 'antd';\nimport { useC2Mod } from 'services/concent';\nimport { CtxM } from 'types/store';\nimport ListArea from './ListArea';\nimport SearchArea from './SearchArea';\n\nexport function setup(ctx: CtxM<{}, 'TodoList'>) {\n  return {\n    hiThere() {\n      return 'hiThere';\n    },\n    changeBigTo(to: number) {\n      ctx.setState({ bigValue: to });\n    },\n  };\n}\n\nconst ValueLabel = React.memo(() => {\n  const { state } = useC2Mod('TodoList');\n  return <h1 style={{ border: '1px solid blue' }}>{state.value}</h1>;\n});\n\nfunction DemoPageTodoList() {\n  const { moduleComputed, state } = useC2Mod('TodoList', { setup, tag: 'Dpt' });\n\n  return (\n    <div>\n      <Alert message={moduleComputed.formattedInput} />\n      <h1 id=\"bigValue\">{state.bigValue}</h1>\n      <SearchArea />\n      <ValueLabel />\n      <ValueLabel />\n      <ListArea />\n    </div>\n  );\n}\n\nexport default React.memo(DemoPageTodoList);\n"],"sourceRoot":""}