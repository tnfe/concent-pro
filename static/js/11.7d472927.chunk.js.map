{"version":3,"sources":["assets/mock/apiData/index.ts","assets/mock/apiData/todoIO.ts","assets/mock/mockHttpService.ts"],"names":["url","data","list","keyword","id","name","getMockFnKey","method","split","pureUrl","tryMockApi","result","key","apiData","getMockResult","mockImpl","get","post","hasMockedFn","Object","prototype","hasOwnProperty","call"],"mappings":"gLAEe,OACb,qBCDK,SAAqBA,EAAaC,GAoBvC,MAnBa,CACX,KAAQ,CACN,MAAS,EACT,KAAQ,CACN,CACE,GAAM,EACN,KAAQ,KACR,MAAQ,GAEV,CACE,GAAM,EACN,KAAQ,UACR,MAAQ,KAId,IAAO,GACP,KAAQ,MDhBV,sBCqBK,SAAuBD,EAAaC,GACzC,IAAIC,EAAO,GAYX,MAXqB,QAAjBD,EAAKE,UAAmBD,EAAO,CAAC,CAAEE,GAAI,EAAGC,KAAM,OAC9B,QAAjBJ,EAAKE,UAAmBD,EAAO,CAAC,CAAEE,GAAI,EAAGC,KAAM,OAEtC,CACX,KAAQ,CACN,MAAS,EACTH,QAEF,IAAO,GACP,KAAQ,OClCZ,SAASI,EAAaC,EAAgBP,GAAc,IAAD,EAC/BA,EAAIQ,MAAM,KAArBC,EAD0C,oBAEjD,MAAM,GAAN,OAAUF,EAAV,YAAoBE,GAStB,SAASC,EAAWH,EAAgBP,EAAaC,GAC/C,IAAMU,EAPR,SAAuBJ,EAAgBP,GACrC,IAAMY,EAAMN,EAAaC,EAAQP,GAEjC,OADea,EAAQD,GAKRE,CAAcP,EAAQP,GACrC,OAAIW,EACoB,oBAAXA,EAA8BA,EAAOX,EAAKC,GAC9CU,EAEF,KAMF,SAASI,IACd,MAAO,CACLC,IAAK,SAAChB,EAAaC,GACjB,OAAOS,EAAW,MAAOV,EAAKC,IAEhCgB,KAAM,SAACjB,EAAaC,GAClB,OAAOS,EAAW,OAAQV,EAAKC,IAEjCiB,YAAa,SAACX,EAAgBP,GAC5B,IAAMY,EAAMN,EAAaC,EAAQP,GACjC,OAAOmB,OAAOC,UAAUC,eAAeC,KAAKT,EAASD","file":"static/js/11.7d472927.chunk.js","sourcesContent":["import * as todoIO from \"./todoIO\";\n\nexport default {\n  'get /api/todo/list': todoIO.getTodoList,\n  'get /api/todo/query': todoIO.queryTodoList,\n} as Record<string, any>;\n","/* eslint-disable */\n\nexport function getTodoList(url: string, data: any) {\n  const resp = {\n    \"data\": {\n      \"total\": 3,\n      \"list\": [\n        {\n          \"id\": 1,\n          \"text\": \"hi\",\n          \"done\": true,\n        },\n        {\n          \"id\": 2,\n          \"text\": \"concent\",\n          \"done\": false,\n        },\n      ]\n    },\n    \"msg\": \"\",\n    \"code\": \"0\"\n  };\n  return resp;\n}\n\nexport function queryTodoList(url: string, data: any) {\n  let list = [] as any[];\n  if (data.keyword === '222') list = [{ id: 3, name: 222 }];\n  if (data.keyword === '333') list = [{ id: 3, name: 333 }];\n\n  const resp = {\n    \"data\": {\n      \"total\": 3,\n      list,\n    },\n    \"msg\": \"\",\n    \"code\": \"0\"\n  };\n  return resp;\n}\n","import apiData from './apiData';\n\nfunction getMockFnKey(method: string, url: string) {\n  const [pureUrl] = url.split('?');\n  return `${method} ${pureUrl}`;\n};\n\nfunction getMockResult(method: string, url: string) {\n  const key = getMockFnKey(method, url);\n  const result = apiData[key];\n  return result;\n};\n\nfunction tryMockApi(method: string, url: string, data: any) {\n  const result = getMockResult(method, url);\n  if (result) {\n    if (typeof result === 'function') return result(url, data);\n    return result;\n  }\n  return null;\n}\n\n/**\n * 既提供给jest使用，也提供给应用处于 innerMock 模式运行时使用\n */\nexport function mockImpl() {\n  return {\n    get: (url: string, data: any) => {\n      return tryMockApi('get', url, data);\n    },\n    post: (url: string, data: any) => {\n      return tryMockApi('post', url, data);\n    },\n    hasMockedFn: (method: string, url: string) => {\n      const key = getMockFnKey(method, url);\n      return Object.prototype.hasOwnProperty.call(apiData, key);\n    },\n  };\n};\n"],"sourceRoot":""}